generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  accounts      Account[]
  invitations   Invitation[]
  sessions      Session[]
  Task          Task[]
  teamMembers   TeamMember[]
}

model Team {
  id          String       @id @default(uuid())
  taskIndex   Int          @default(1)
  name        String
  slug        String       @unique
  domain      String?      @unique
  defaultRole String       @default("member")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  invitations Invitation[]
  tasks       Task[]
  members     TeamMember[]
}

model Task {
  id          Int    @id @default(autoincrement())
  taskNumber  Int    
  teamId      String
  authorId    String
  title       String
  status      String
  duedate     String
  description String
  properties  Json
  author      User   @relation(fields: [authorId], references: [id])
  team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      String   @default("member")
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}
