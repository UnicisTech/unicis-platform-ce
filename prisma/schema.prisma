generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
  AUDITOR
}

enum Plan {
  COMMUNITY
  PREMIUM
  ULTIMATE
}

enum PaymentStatus {
  SUCCESS
  FAILED
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(uuid())
  name          String
  firstName     String
  lastName      String
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  accounts      Account[]
  invitations   Invitation[]
  sessions      Session[]
  Task          Task[]
  teamMembers   TeamMember[]
  Comment       Comment[]
  Subscription  Subscription[]
}

model Team {
  id           String        @id @default(uuid())
  taskIndex    Int           @default(1)
  name         String
  slug         String        @unique
  domain       String?       @unique
  defaultRole  Role          @default(MEMBER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  members      TeamMember[]
  invitations  Invitation[]
  apiKeys      ApiKey[]
  tasks        Task[]
  properties   Json          @default("{}")
  subscription Subscription?
}

model Subscription {
  id              String    @id @default(uuid())
  teamId          String    @unique
  userEmail       String
  plan            Plan      @default(COMMUNITY)
  startDate       DateTime  @default(now())
  nextInvoiceDate DateTime?
  payments        Payment[]

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  date           DateTime
  amount         Int
  status         PaymentStatus
  paymentUrl     String

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int          @id @default(autoincrement())
  taskNumber  Int
  teamId      String
  authorId    String
  title       String
  status      String
  duedate     String
  description String
  comments    Comment[]
  attachments Attachment[]
  properties  Json
  author      User         @relation(fields: [authorId], references: [id])
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      Int
  createdById String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Attachment {
  id       String @id @default(uuid())
  taskId   Int
  filename String
  fileData Bytes
  url      String
  task     Task   @relation(fields: [taskId], references: [id])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
